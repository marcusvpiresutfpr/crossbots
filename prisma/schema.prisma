// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Good practice and well structured schema for a competitive robotic team
// User, Robots, Awards, Competitions.
// Users <-> Robots (many-to-many)
// Awards <-> Robots (one-to-many)
// Awards <-> Competitions (one-to-many)

enum UserRole {
  LEADER
  ADMIN
  MEMBER
  VISITOR
}

model User {
  id           String                @id @default(cuid())
  name         String
  email        String                @unique
  imageUrl     String                @default("")
  passwordHash String
  role         UserRole              @default(VISITOR)
  bio          String                @default("")
  robots       UserRobotEngagement[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model Robot {
  id          String                  @id @default(cuid())
  name        String
  description String                  @default("")
  imageUrl    String                  @default("")
  users       UserRobotEngagement[]
  categories  RobotCategoryRelation[]
  awards      Award[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model Award {
  id            String      @id @default(cuid())
  name          String
  robotId       String
  robot         Robot       @relation(fields: [robotId], references: [id])
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Competition {
  id        String   @id @default(cuid())
  date      DateTime
  name      String
  awards    Award[]
  imageUrl  String   @default("")
  description String @default("")
  location  String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRobotEngagement {
  userId   String
  robotId  String
  isActive Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id])
  robot    Robot   @relation(fields: [robotId], references: [id])

  @@id([userId, robotId])
}

model Category {
  id        String                  @id @default(cuid())
  name      String
  robots    RobotCategoryRelation[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

// Category and Robot relationship
model RobotCategoryRelation {
  robotId    String
  categoryId String
  robot      Robot    @relation(fields: [robotId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([robotId, categoryId])
}
